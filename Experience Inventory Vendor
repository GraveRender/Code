string PREFIX = "data_";
key dataRead;
key dataWrite;
string target_agent;
string jsonCache = "";

// Required items and amounts are defined here for easy changes
list REQUIRED_ITEMS = ["Gold", "Bones", "Scales"];
list REQUIRED_AMOUNTS = [100, 4, 20];

string ITEM_TO_GIVE = "Object";
integer DIALOG_CHANNEL = -82742;
list dialogButtons = ["Buy", "Cancel"];

#define BAD_JSON [JSON_INVALID, JSON_NULL]

default
{
    state_entry()
    {
        // Build cost string dynamically
        integer count = llGetListLength(REQUIRED_ITEMS);
        string costStr = "";
        integer i;
        for (i = 0; i < count; i++)
        {
            integer amt = llList2Integer(REQUIRED_AMOUNTS, i);
            string item = llList2String(REQUIRED_ITEMS, i);
            costStr += (string)amt + " " + item;
            if (i < count - 1)
            {
                costStr += " + ";
            }
        }

        llSetText("Touch to buy: " + ITEM_TO_GIVE + "\nCost: " + costStr, <1,1,0>, 1.0);
    }

    touch_start(integer total_number)
    {
        target_agent = llDetectedKey(0);
        llRequestExperiencePermissions(target_agent, "");
    }

    experience_permissions(key agent)
    {
        if (agent == target_agent)
        {
            dataRead = llReadKeyValue(PREFIX + (string)target_agent);
        }
    }

    dataserver(key queryid, string data)
    {
        integer result = (integer)llGetSubString(data, 0, 0);
        string jsonData = llGetSubString(data, 2, -1);

        if (!result)
        {
            if (jsonData == "14")
            {
                llRegionSayTo(target_agent, 0, "❌ Experience permissions not granted or no data found.");
            }
            else
            {
                llRegionSayTo(target_agent, 0, "❌ Data error: " + jsonData);
            }
            return;
        }

        if (queryid == dataRead)
        {
            integer canAfford = TRUE;
            integer count = llGetListLength(REQUIRED_ITEMS);
            integer i;

            // Check affordability
            for (i = 0; i < count; i++)
            {
                string item = llList2String(REQUIRED_ITEMS, i);
                string valStr = llJsonGetValue(jsonData, [item]);

                // If missing or invalid, add as 0
                if (llListFindList(BAD_JSON, [valStr]) != -1)
                {
                    jsonData = llJsonSetValue(jsonData, [item], "0");
                    valStr = "0";
                }

                integer have = (integer)valStr;
                integer cost = llList2Integer(REQUIRED_AMOUNTS, i);

                if (have < cost)
                {
                    canAfford = FALSE;
                    llRegionSayTo(target_agent, 0,
                        "❌ Not enough " + item + "!\nHave: " + (string)have + " / " + (string)cost);
                }
            }

            if (canAfford)
            {
                jsonCache = jsonData;

                // Build cost message string
                string costMsg = "";
                for (i = 0; i < count; i++)
                {
                    integer amt = llList2Integer(REQUIRED_AMOUNTS, i);
                    string item = llList2String(REQUIRED_ITEMS, i);
                    costMsg += (string)amt + " " + item;
                    if (i < count - 1)
                    {
                        costMsg += " + ";
                    }
                }

                // Build "You have" message string
                string haveMsg = "";
                for (i = 0; i < count; i++)
                {
                    string item = llList2String(REQUIRED_ITEMS, i);
                    string valStr = llJsonGetValue(jsonData, [item]);
                    haveMsg += valStr + " " + item;
                    if (i < count - 1)
                    {
                        haveMsg += ", ";
                    }
                }

                string message = "Purchase confirmation:\n\nItem: " + ITEM_TO_GIVE +
                                 "\nCost: " + costMsg +
                                 "\n\nYou have:\n" + haveMsg +
                                 "\n\nProceed with purchase?";

                llDialog(target_agent, message, dialogButtons, DIALOG_CHANNEL);
                llListen(DIALOG_CHANNEL, "", target_agent, "");
            }
        }
    }

    listen(integer channel, string name, key id, string msg)
    {
        if (channel == DIALOG_CHANNEL && id == target_agent)
        {
            if (msg == "Buy")
            {
                string newData = jsonCache;
                integer count = llGetListLength(REQUIRED_ITEMS);
                integer i;

                // Deduct costs from currencies
                for (i = 0; i < count; i++)
                {
                    string item = llList2String(REQUIRED_ITEMS, i);
                    string valStr = llJsonGetValue(newData, [item]);
                    integer have = (integer)valStr;
                    integer cost = llList2Integer(REQUIRED_AMOUNTS, i);
                    integer newAmount = have - cost;

                    newData = llJsonSetValue(newData, [item], (string)newAmount);
                }

                dataWrite = llUpdateKeyValue(PREFIX + (string)target_agent, newData, TRUE, jsonCache);

                llGiveInventory(target_agent, ITEM_TO_GIVE);

                string leftMsg = "";
                for (i = 0; i < count; i++)
                {
                    string item = llList2String(REQUIRED_ITEMS, i);
                    string valStr = llJsonGetValue(newData, [item]);
                    leftMsg += item + " left: " + valStr;
                    if (i < count - 1)
                    {
                        leftMsg += ", ";
                    }
                }

                llRegionSayTo(target_agent, 0,
                    "✅ You bought: " + ITEM_TO_GIVE + "\n" + leftMsg);
            }
            else
            {
                llRegionSayTo(target_agent, 0, "❌ Purchase canceled.");
            }
        }
    }
}

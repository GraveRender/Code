// Admin tool for managing Resources for agents in an experience
// target_agent is set to owner as an example but an agent selector could be implemented
// If you use this code keep in mind that there is a limit of ~4096 characters for each keypair value so you should keep unlock names as short as possible

string target_agent;

key dataRead;
key dataWrite;

string mode;

#define DEFAULT_DATA ["gold", "0", "bones", "0"]
#define CHANNEL -91516
#define BAD_JSON [JSON_INVALID, JSON_NULL]
#define PREFIX "data_"   // Prefix for experience data keys   "data_6f37a320-820e-426f-9e5c-716700e65afc" = {"Gold": "0","Bones": "0"}


write()
{
    list data;
    data += ["gold", llLinksetDataRead("current_gold")];
    data += ["bones", llLinksetDataRead("current_bones")];
    data += ["unlocks", llLinksetDataRead("current_unlocks")];
    dataWrite = llUpdateKeyValue(PREFIX+target_agent, llList2Json(JSON_OBJECT, data), FALSE, "");
}

default
{
    state_entry()
    {
        target_agent = llGetOwner();
    }

    touch_start(integer total_number)
    {
        if(llDetectedKey(0) == llGetOwner())
        {
            // Check the expereince for existing agent data
            dataRead = llReadKeyValue(PREFIX+target_agent);
        }
    }

    dataserver(key queryid, string data)
    {
        // Determine if the data read or write operation was successful
        integer result = (integer)llGetSubString(data, 0, 0);

        // Retrieve the JSON data from the response, alternatively retrieves the error message if result == 0
        string jsonData = llGetSubString(data, 2, -1);

        if(result)
        {
            // Read operations
            if(queryid == dataRead)
            {
                integer malformed;
                
                string current_Gold = llJsonGetValue(jsonData, ["gold"]);  llOwnerSay("current_Gold: " + current_Gold);
                string current_Bones = llJsonGetValue(jsonData, ["bones"]); llOwnerSay("current_Bones: " + current_Bones);

                // Check the retrieved data structure 
                if(llListFindList(BAD_JSON, [current_Gold]) != -1  || llListFindList(BAD_JSON, [current_Bones]) != -1)
                {
                    malformed = TRUE;
                }

                // If either Gold or unlocks are malformed, we will start a rewrite dialog
                if(malformed)
                {
                    llListen(CHANNEL, "", llGetOwner(), "");
                    llDialog(llGetOwner(), 
                        "Malformed data received for agent: " + (string)target_agent + "\n\n" +
                        "Would you like to reset the experience data to defaults?",
                        ["Yes", "No"], CHANNEL
                    );
                    //dataWrite = llUpdateKeyValue(target_agent,DEFAULT_DATA, FALSE, FALSE);
                }
                else 
                {
                    // Store current Gold and unlocks in linkset data
                    llLinksetDataWrite("current_gold", current_Gold);
                    llLinksetDataWrite("current_bones", current_Bones);

                    // Notify the owner with a dialog containing the retrieved data
                    llListen(CHANNEL, "", llGetOwner(), "");
                    llDialog(llGetOwner(), 
                        "Experience Data Retrieved" + "\n\n" + 
                        "Agent: " + (string)target_agent + "\n"
                        ,
                        ["Edit", "Reset", "Close"]
                        ,
                        CHANNEL
                    );
                }
            }
            
            // Write operations
            else if(queryid == dataWrite)
            {
                // Data write successful
                llOwnerSay("Experience data successfully created or updated.");
                llOwnerSay("Gold: " + llJsonGetValue(jsonData, ["gold"]));
                llOwnerSay("Bones: " + llJsonGetValue(jsonData, ["bones"]));
                llListenRemove(CHANNEL);
            }
            else
            {
                // Unrecognized query ID
                llOwnerSay("Data request was not recognized.");
                llOwnerSay("Query ID: " + (string)queryid);
                llOwnerSay("Data: " + jsonData);
                llListenRemove(CHANNEL);
            }
        }
        else 
        {
            // No experience key found for the agent
            if(jsonData == "14")
            {
                llOwnerSay("No experience data found for agent: " + (string)target_agent);
                llOwnerSay("Would you like to create new experience data for this agent?");
                llListen(CHANNEL, "", llGetOwner(), "");
                llDialog(llGetOwner(), 
                    "No experience data found for agent: " + (string)target_agent + "\n\n" +
                    "Would you like to create new experience data?",
                    ["Yes", "No"], CHANNEL
                );
            }
            // Handle error in data retrieval
            llOwnerSay("Failed to retrieve experience data for agent: " + (string)target_agent);
            llOwnerSay("Error: " + jsonData);
            llListenRemove(CHANNEL);
        }
    }

    listen(integer channel, string name, key id, string message)
    {
        //llOwnerSay(message);
        if(message == "Edit")
        {
            // Open the experience data editor dialog
            llDialog(llGetOwner(),
                "Edit Experience Data for Agent: ",
                ["Gold","Bones","Close"], CHANNEL
            );
        }
        else if(message == "Reset")
        {
            // Reset the experience data to defaults
            llDialog(llGetOwner(),
                "Reset user experience data to defaults?",
                ["Yes", "No"], CHANNEL
            );
        }
        else if(message == "Yes")
        {
            // Reset the experience data to defaults
            llOwnerSay("Experience data reset to defaults.");
            dataWrite = llUpdateKeyValue(PREFIX+target_agent, llList2Json(JSON_OBJECT,DEFAULT_DATA), FALSE, "");
        }
        else if(message == "Close" || message == "No" || message == "Cancel")
        {
            // Close the dialog
            llListenRemove(CHANNEL);
            mode = ""; // Reset mode
        }


        // Editor Menu
        else if(message == "Gold")
        {
            // Open a dialog to edit Gold
            mode = "Gold";
            llDialog(llGetOwner(),
                "Edit Gold for Agent: " + (string)target_agent + "\n\n" +
                "Current Gold: " + llLinksetDataRead("current_gold") + "\n\n",
                ["Add", "Remove", "Cancel"], CHANNEL
            );
        }
        else if(message == "Bones")
        {
            // Open a dialog to edit Gold
            mode = "Bones";
            llDialog(llGetOwner(),
                "Edit Gold for Agent: " + (string)target_agent + "\n\n" +
                "Current Bones: " + llLinksetDataRead("current_bones") + "\n\n",
                ["Add", "Remove", "Cancel"], CHANNEL
            );
        }
        else if(message == "Add")
        {
            if(mode == "Gold")
            {
                // Prompt for amount to add to Gold
                llTextBox(llGetOwner(), "Enter the amount to add to Gold:", CHANNEL );
            }
            else if(mode == "Bones")
            {
                // Prompt for amount to add to Gold
                llTextBox(llGetOwner(), "Enter the amount to add to Bones:", CHANNEL );
            }
            mode = "+" + mode; // Set mode
        }
        else if(message == "Remove")
        {
            if(mode == "Gold")
            {
                // Prompt for amount to remove from Gold
                llTextBox(llGetOwner(), "Enter the amount to remove from Gold:", CHANNEL );
            }
            else if(mode == "Bones")
            {
                // Prompt for amount to remove from Gold
                llTextBox(llGetOwner(), "Enter the amount to remove from Bones:", CHANNEL );
            }
            mode = "-" + mode; // Set mode
        }

        else if(message == "Save")
        {
            if(mode == "+Gold")
            {
                // Add Gold
                integer Gold = (integer)llLinksetDataRead("current_gold");
                Gold += (integer)llLinksetDataRead("temp_data");
                llOwnerSay("Adding "+ llLinksetDataRead("temp_data") + " Gold to agent: " + (string)target_agent);
                llLinksetDataWrite("current_gold", (string)Gold);
                write();
                //dataWrite = llUpdateKeyValue(PREFIX+target_agent, llList2Json(JSON_OBJECT, ["Gold", (string)Gold, "unlocks", llLinksetDataRead("current_unlocks")]), FALSE, "");
            }
            else if(mode == "-Gold")
            {
                // Remove Gold
                integer Gold = (integer)llLinksetDataRead("current_gold");
                Gold -= (integer)llLinksetDataRead("temp_data");
                if(Gold < 0) Gold = 0; // Ensure Gold do not go negative
                llOwnerSay("Removing " + llLinksetDataRead("temp_data") + " Gold from agent: " + (string)target_agent);
                llLinksetDataWrite("current_gold", (string)Gold);
                write();
                //dataWrite = llUpdateKeyValue(PREFIX+target_agent, llList2Json(JSON_OBJECT, ["Gold", (string)Gold, "unlocks", llLinksetDataRead("current_unlocks")]), FALSE, "");
            }
            else if(mode == "+Bones")
            {
                // Add Bones
                integer Bones = (integer)llLinksetDataRead("current_bones");
                Bones += (integer)llLinksetDataRead("temp_data");
                llOwnerSay("Adding "+ llLinksetDataRead("temp_data") + " Bones to agent: " + (string)target_agent);
                llLinksetDataWrite("current_bones", (string)Bones);
                write();
                //dataWrite = llUpdateKeyValue(PREFIX+target_agent, llList2Json(JSON_OBJECT, ["Bones", (string)Bones, "unlocks", llLinksetDataRead("current_unlocks")]), FALSE, "");
            }
            else if(mode == "-Bones")
            {
                // Remove Bones
                integer Bones = (integer)llLinksetDataRead("current_bones");
                Bones -= (integer)llLinksetDataRead("temp_data");
                if(Bones < 0) Bones = 0; // Ensure Gold do not go negative
                llOwnerSay("Removing " + llLinksetDataRead("temp_data") + " Bones from agent: " + (string)target_agent);
                llLinksetDataWrite("current_bones", (string)Bones);
                write();
                //dataWrite = llUpdateKeyValue(PREFIX+target_agent, llList2Json(JSON_OBJECT, ["Bones", (string)Bones, "unlocks", llLinksetDataRead("current_unlocks")]), FALSE, "");
            }
            }
        else
        {
            if(llListFindList(["+Gold","-Gold","+Bones","-Bones"],[mode]) > -1)
            {
                llLinksetDataWrite("temp_data", message);
                llDialog(llGetOwner(), "Do you want to save this change?", ["Save", "Cancel"], CHANNEL );
            }
            else 
            {

            }
        }
    }
}

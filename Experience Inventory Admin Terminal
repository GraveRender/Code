// Admin tool for managing Resources for agents in an experience
// Dynamic version — just update ITEM_NAMES to add/remove tracked resources

list AdminKeys = [
    "066948da-64bd-4780-9930-7b68078bd40d",
    "67d888b4-4429-45b6-8f3a-a5c2b5acc07f"
];

list ITEM_NAMES = ["Gold","Bones","Stone","Wood","Scales","Gems"]; // <--- Add or remove items here

string target_agent;
key user;
key dataRead;
key dataWrite;

string mode;

#define PREFIX "data_"
#define CHANNEL -91516
#define BAD_JSON [JSON_INVALID, JSON_NULL]

// Generates a default data list like ["Gold", "0", "Bones", "0"]
list getDefaultData() {
    list defaults;
    integer i;
    for (i = 0; i < llGetListLength(ITEM_NAMES); i++) {
        defaults += [llList2String(ITEM_NAMES, i), "0"];
    }
    return defaults;
}

write() {
    list data;
    integer i;
    for (i = 0; i < llGetListLength(ITEM_NAMES); i++) {
        string item = llList2String(ITEM_NAMES, i);
        string val = llLinksetDataRead("current_" + llToLower(item));
        data += [item, val];
    }
    dataWrite = llUpdateKeyValue(PREFIX + target_agent, llList2Json(JSON_OBJECT, data), FALSE, "");
}

default {
    state_entry() {
        target_agent = llGetOwner();
    }

    touch_start(integer total_number) {
        key toucher = llDetectedKey(0);
        if (llListFindList(AdminKeys, [(string)toucher]) != -1) {
            user = toucher;
            dataRead = llReadKeyValue(PREFIX + target_agent);
        } else {
            user = NULL_KEY;
        }
    }

    dataserver(key queryid, string data) {
        integer result = (integer)llGetSubString(data, 0, 0);
        string jsonData = llGetSubString(data, 2, -1);

        if (result) {
            if (queryid == dataRead) {
                integer needs_update = FALSE;
                list updated_data = [];
                integer i;

                // Check each item individually for missing or malformed values
                for (i = 0; i < llGetListLength(ITEM_NAMES); i++) {
                    string item = llList2String(ITEM_NAMES, i);
                    string val = llJsonGetValue(jsonData, [item]);

                    if (llListFindList(BAD_JSON, [val]) != -1) {
                        val = "0";  // Initialize missing/malformed to zero
                        needs_update = TRUE;
                    }

                    updated_data += [item, val];
                    llLinksetDataWrite("current_" + llToLower(item), val);
                }

                // If any missing items were fixed, write updated data back
                if (needs_update) {
                    dataWrite = llUpdateKeyValue(PREFIX + target_agent, llList2Json(JSON_OBJECT, updated_data), FALSE, "");
                    llRegionSayTo(user,0, "Missing resource items were initialized to zero.");
                }

                llListen(CHANNEL, "", user, "");
                llDialog(user,
                    "Experience Data Retrieved\n\nAgent: " + (string)target_agent,
                    ["Edit", "Target", "Reset", "Close"], CHANNEL
                );
            } else if (queryid == dataWrite) {
                llRegionSayTo(user,0, "✅ Experience data successfully created or updated.");
                integer i;
                for (i = 0; i < llGetListLength(ITEM_NAMES); i++) {
                    string item = llList2String(ITEM_NAMES, i);
                    llRegionSayTo(user,0, item + ": " + llJsonGetValue(jsonData, [item]));
                }
                llListenRemove(CHANNEL);
            } else {
                llRegionSayTo(user,0, "⚠️ Unrecognized data query ID.");
                llRegionSayTo(user,0, "Query ID: " + (string)queryid);
                llRegionSayTo(user,0, "Data: " + jsonData);
                llListenRemove(CHANNEL);
            }
        } else {
            if (jsonData == "14") {
                llRegionSayTo(user,0, "No experience data found for: " + (string)target_agent);
                llDialog(user,
                    "No experience data found for agent: " + (string)target_agent + "\n\n" +
                    "Would you like to create new experience data?",
                    ["Yes", "No"], CHANNEL
                );
                llListen(CHANNEL, "", user, "");
            } else {
                llRegionSayTo(user,0, "⚠️ Failed to retrieve data for: " + (string)target_agent);
                llRegionSayTo(user,0, "Error: " + jsonData);
                llListenRemove(CHANNEL);
            }
        }
    }

    listen(integer channel, string name, key id, string message) {
        if (llStringLength(message) == 36 && (key)message != NULL_KEY) {
            mode = "";
            target_agent = (key)message;
            llRegionSayTo(user,0, "Target: " + (string)target_agent);
        }

        if (message == "Edit") {
            llDialog(user,
                "Edit Resource Type:",
                ITEM_NAMES + ["Close"], CHANNEL);
        } else if (message == "Target") {
            llTextBox(user, "Enter the Target Avatar Key:", CHANNEL);
        } else if (message == "Reset") {
            llDialog(user,
                "Reset user experience data to defaults?",
                ["Yes", "No"], CHANNEL);
        } else if (message == "Yes") {
            dataWrite = llUpdateKeyValue(PREFIX + target_agent, llList2Json(JSON_OBJECT, getDefaultData()), FALSE, "");
            llRegionSayTo(user,0, "✅ Experience data reset to defaults.");
        } else if (message == "No" || message == "Close" || message == "Cancel") {
            llListenRemove(CHANNEL);
            mode = "";
        } else if (llListFindList(ITEM_NAMES, [message]) != -1) {
            mode = message;
            string val = llLinksetDataRead("current_" + llToLower(mode));
            llDialog(user,
                "Edit " + mode + " for Agent: " + (string)target_agent + "\n\n" +
                "Current " + mode + ": " + val + "\n\n",
                ["Add", "Remove", "Cancel"], CHANNEL);
        } else if (message == "Add" || message == "Remove") {
            if (mode != "") {
                string val = llLinksetDataRead("current_" + llToLower(mode));
                llTextBox(user,
                    "Enter amount to " + llToLower(message) + " from " + mode + "\n(Current: " + val + ")",
                    CHANNEL);
                if (message == "Add") {
                    mode = "+" + mode;
                } else {
                    mode = "-" + mode;
                }
            }
        } else if (message == "Save") {
            string op = llGetSubString(mode, 0, 0);
            string item = llGetSubString(mode, 1, -1);
            string keyname = "current_" + llToLower(item);
            integer cur = (integer)llLinksetDataRead(keyname);
            integer amt = (integer)llLinksetDataRead("temp_data");

            if (op == "+") {
                cur += amt;
            } else {
                cur -= amt;
                if (cur < 0) cur = 0;
            }

            string action;
            if (op == "+") {
                action = "Adding ";
            } else {
                action = "Removing ";
            }
            llRegionSayTo(user,0, action + (string)amt + " " + item + " to agent: " + (string)target_agent);

            llLinksetDataWrite(keyname, (string)cur);
            write();
        } else {
            if (llSubStringIndex(mode, "+") == 0 || llSubStringIndex(mode, "-") == 0) {
                llLinksetDataWrite("temp_data", message);
                llDialog(user, "Do you want to save this change?", ["Save", "Cancel"], CHANNEL);
            }
        }
    }
}
